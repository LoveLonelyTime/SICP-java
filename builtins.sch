(begin
    (define (cadr exp) (car (cdr exp)))
    (define (cddr exp) (cdr (cdr exp)))
    (define (caddr exp) (car (cdr (cdr exp))))
    (define (caadr exp) (car (car (cdr exp))))
    (define (cdadr exp) (cdr (car (cdr exp))))
    (define (cadddr exp) (car (cdr (cdr (cdr exp)))))
    (define (append list1 list2)
        (if (nothing? list1)
            list2
            (cons (car list1) (append (cdr list1) list2))
        )
    )
    (define (nil) nothing)
    (define (length items)
        (if (nothing? items) 0 (+ 1 (length (cdr items))))
    )

    (define broken-heart (quote broken-heart))
    (define (broken-heart? val) (eq? broken-heart val))
    (define (pointer-to-pair? val) (number? val))
    (define (create-vector len init)
        (if (= len 0) nothing (cons init (create-vector (- len 1) init)))
    )
    (define (vector-ref vec idx)
        (if (nothing? vec) (error (quote Index-Out-Of-Bounds)) nothing)
        (if (= idx 0) (car vec) (vector-ref (cdr vec) (- idx 1)))
    )
    (define (vector-set! vec idx val)
        (if (nothing? vec) (error (quote Index-Out-Of-Bounds)) nothing)
        (if (= idx 0) (set-car! vec val) (vector-set! (cdr vec) (- idx 1) val))
    )

    (define primitive-procedures
        (list
            (list (quote car) car)
            (list (quote cdr) cdr)
            (list (quote cons) cons)
            (list (quote +) +)
            (list (quote -) -)
            (list (quote *) *)
            (list (quote /) /)
            (list (quote =) =)
            (list (quote print) print)
            (list (quote nothing?) nothing?)
        )
    )
    (define (map proc items)
        (if (nothing? items)
            nothing
            (cons (proc (car items)) (map proc (cdr items)))
        )
    )
    (define (primitive-procedure-names)
        (map car primitive-procedures)
    )
    (define (primitive-procedure-objects)
        (map (lambda (proc) (list (quote primitive) (cadr proc))) primitive-procedures)
    )
    (define (make-frame variables values) (cons variables values))
    (define (extend-environment vars vals base-env)
        (if (= (length vars) (length vals))
            (cons (make-frame vars vals) base-env)
            (if (< (length vars) (length vals))
                (error (quote Too-Many-Arguments-Supplied))
                (error (quote Too-Few-Arguments-Supplied))
            )
        )
    )
    (define (first-frame env) (car env))
    (define (frame-variables frame) (car frame))
    (define (frame-values frame) (cdr frame))
    (define (add-binding-to-frame! var val frame)
        (set-car! frame (cons var (car frame)))
        (set-cdr! frame (cons val (cdr frame)))
    )
    (define (define-variable! var val env)
        (let ((frame (first-frame env)))
            (define (scan vars vals)
                (cond ((nothing? vars) (add-binding-to-frame! var val frame))
                    ((eq? var (car vars)) (set-car! vals val))
                    (else (scan (cdr vars) (cdr vals)))
                )
            )
            (scan (frame-variables frame) (frame-values frame))
        )
    )
    (define (enclosing-environment env) (cdr env))
    (define (set-variable-value! var val env)
        (define (env-loop env)
            (define (scan vars vals)
                (cond ((nothing? vars) (env-loop (enclosing-environment env)))
                    ((eq? var (car vars))
                    (set-car! vals val))
                    (else (scan (cdr vars) (cdr vals)))
                )
            )
        (if (eq? env the-empty-environment)
            (error (quote Unbound-Variable))
            (let ((frame (first-frame env)))
                (scan (frame-variables frame) (frame-values frame)))
            )
        )
        (env-loop env)
    )
    (define the-empty-environment nothing)
    (define (setup-environment)
        (let ((initial-env (extend-environment (primitive-procedure-names) (primitive-procedure-objects) the-empty-environment)))
            (define-variable! (quote true) true initial-env)
            (define-variable! (quote false) false initial-env)
            initial-env)
    )
    (define the-global-environment (setup-environment))
    (define (get-global-environment) the-global-environment)

    (define (tagged-list? exp tag)
        (if (pair? exp) (eq? (car exp) tag) false)
    )
    (define (self-evaluating? exp)
        (if (symbol? exp) (can-cast-number? exp) false)
    )
    (define (variable? exp) (symbol? exp))
    (define (quoted? exp) (tagged-list? exp (quote quote)))
    (define (assignment? exp) (tagged-list? exp (quote set!)))
    (define (definition? exp) (tagged-list? exp (quote define)))
    (define (if? exp) (tagged-list? exp (quote if)))
    (define (lambda? exp) (tagged-list? exp (quote lambda)))
    (define (begin? exp) (tagged-list? exp (quote begin)))
    (define (application? exp) (pair? exp))
    (define (lambda-parameters exp) (cadr exp))
    (define (lambda-body exp) (cddr exp))
    (define (make-procedure parameters body env) (list (quote procedure) parameters body env))
    (define (operator exp) (car exp))
    (define (operands exp) (cdr exp))
    (define (empty-arglist) nothing)
    (define (no-operands? ops) (nothing? ops))
    (define (first-operand ops) (car ops))
    (define (last-operand? ops) (nothing? (cdr ops)))
    (define (adjoin-arg arg arglist) (append arglist (list arg)))
    (define (rest-operands ops) (cdr ops))
    (define (primitive-procedure? proc) (tagged-list? proc (quote primitive)))
    (define (compound-procedure? proc) (tagged-list? proc (quote procedure)))
    (define (procedure-parameters p) (cadr p))
    (define (procedure-body p) (caddr p))
    (define (procedure-environment p) (cadddr p))
    (define (begin-actions exp) (cdr exp))
    (define (first-exp seq) (car seq))
    (define (last-exp? seq) (nothing? (cdr seq)))
    (define (rest-exps seq) (cdr seq))
    (define (if-predicate exp) (cadr exp))
    (define (if-consequent exp) (caddr exp))
    (define (if-alternative exp) (cadddr exp))
    (define (assignment-variable exp) (cadr exp))
    (define (assignment-value exp) (caddr exp))
    (define (definition-variable exp)
        (if (symbol? (cadr exp)) (cadr exp) (caadr exp))
    )
    (define (definition-value exp)
        (if (symbol? (cadr exp))
            (caddr exp)
            (make-lambda (cdadr exp) (cddr exp))
        )
    )
    (define (lookup-variable-value var env)
        (define (env-loop env)
            (define (scan vars vals)
                (cond ((nothing? vars) (env-loop (enclosing-environment env)))
                    ((eq? var (car vars)) (car vals))
                    (else (scan (cdr vars) (cdr vals)))
                )
            )
            (if (eq? env the-empty-environment)
                (error (quote Unbound-Variable))
                (let ((frame (first-frame env)))
                (scan (frame-variables frame) (frame-values frame)))
            )
        )
        (env-loop env)
    )
    (define (make-lambda parameters body)
        (cons (quote lambda) (cons parameters body))
    )
    (define (primitive-implementation proc) (cadr proc))
    (define (apply-primitive-procedure proc args)
        (apply (primitive-implementation proc) args)
    )
    (define (make-compiled-procedure entry env)
        (list (quote compiled-procedure) entry env)
    )
    (define (compiled-procedure-entry c-proc) (cadr c-proc))
    (define (compiled-procedure-env c-proc) (caddr c-proc))
)